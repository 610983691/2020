<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 用于定义节点名称，可以不用配置 -->
    <contextName>order</contextName>
    <!-- property 定义一些变量和值，可以在后面的配置中使用 -->
    <property name="logback.logdir" value="D:\\tmp\\logs" />
	<property name="logback.appname" value="example"/>
    
    <!--appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
      	<!-- 可以看到layout和encoder，都可以将事件转换为格式化后的日志记录，但是控制台输出使用layout，文件输出使用encoder -->
        <layout>
            <pattern>%d{MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </layout>
    </appender>

    <!--输出到文件,info级别-->
    <appender name="infolog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，    所以我们使用下面的策略，可以避免输出 Error 的日志-->
	    <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印INFO日志 -->
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

	    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
	    <File>${logback.logdir}/${logback.appname}.info.log</File>
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	        <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
	        <FileNamePattern>${logback.logdir}/${logback.appname}.info.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
	        <!--只保留最近90天的日志-->
	        <maxHistory>90</maxHistory>
	        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            	<maxFileSize>100MB</maxFileSize> 
            </timeBasedFileNamingAndTriggeringPolicy>
	        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
	        <!--<totalSizeCap>1GB</totalSizeCap>-->
	    </rollingPolicy>
	    <!--日志输出编码格式化-->
	    <encoder>
	        <charset>UTF-8</charset>
	        <pattern>%d{MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} %line - %msg%n</pattern>
	    </encoder>
	</appender>
	
	<!-- 错误级别日志记录 -->
	<appender name="errlog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
	    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	        <level>Error</level>
	    </filter>
	    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
	    <File>${logback.logdir}/${logback.appname}.error.log</File>
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	        <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
	        <FileNamePattern>${logback.logdir}/${logback.appname}.error.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
	        <!--只保留最近90天的日志-->
	        <maxHistory>90</maxHistory>
	        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            	<maxFileSize>100MB</maxFileSize> 
            </timeBasedFileNamingAndTriggeringPolicy>
	        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
	        <!--<totalSizeCap>1GB</totalSizeCap>-->
	    </rollingPolicy>
	    <!--日志输出编码格式化-->
	    <encoder>
	        <charset>UTF-8</charset>
	        <pattern>%d{MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} %line - %msg%n</pattern>
	    </encoder>
	</appender>

    <root level="DEBUG">
        <appender-ref ref="console" />
        <appender-ref ref="infolog" />
        <appender-ref ref="errlog" />
    </root>

    <!-- logback为java中的包 -->
    <logger name="com.coulee" level="debug"/>
</configuration>